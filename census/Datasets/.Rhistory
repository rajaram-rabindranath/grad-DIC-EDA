########################################################################
# File name : eda_nyt_multipleFiles.R
# Project   : Project 1 -- NYtimes -- multiple days
# Course    : CSE 587 -- Data Intensive Computing
# Author    : Rajaram Rabindranath, Harish Mangalapalli
########################################################################
### Libs to be loaded
install.packages("reshape");
library(reshape)
library(ggplot2)
library(doBy)
## Move to the directory that has the data
## Move to the directory that has the data
dataSourcePath <- "/home/raja/Education/sem 2/DIC/submission/EDA_using_R_CSE587/NYT/Datasets"
setwd(dataSourcePath)
# function to save ggplots
dic.ggsave <- function(filename = default_name(plot), height= 5, width= 8, dpi= 200, ...)
{
ggsave(filename=filename, height=height, width=width, dpi=dpi, ...)
}
# the days vector
days <- (1:31)
# Constant
female <- 0
male <- 1
# Summary metrics --- for all 31 days
percentLoggedIn <- vector()
countTotal <- vector()
countFemale <- vector()
countMale <- vector()
meanCTR <- vector()
meanClicks <- vector()
lowClicker <- vector()
okClicker <- vector()
hiClicker <- vector()
nonClicker <- vector()
notTargetted <- vector()
for(i in 1:31)
{
filename <- paste("nyt",i,sep="")
filename <- paste(filename,".csv",sep="")
nyt <- read.csv(filename)
# Create Age buckets
nyt$AgeGrp <- cut(nyt$Age,c(-Inf,0,18,24,34,44,54,64,Inf))
# Modifying gender classification from NUMERIC -- STRING
nyt$Gender[nyt$Gender == male] <- "MALE"
nyt$Gender[nyt$Gender == female & nyt$AgeGrp != "(-Inf,0]"] <- "FEMALE"
# the nyt$Gender == female cond. is redundant
nyt$Gender[nyt$Gender == female & nyt$AgeGrp == "(-Inf,0]"] <- "Not loggedIn"
# Click categories
nyt$clkCat[nyt$Impressions == 0] <- "NOT_TARGETTED"
nyt$clkCat[nyt$Clicks == 0 & nyt$Impressions > 0] <- "NON_CLICKERS"
nyt$clkCat[nyt$Clicks > 0] <- "CLICKERS"
nyt$clkCat <- factor(nyt$clkCat)
# Split the masterDataset for analysis
nyt.notLogged <- subset(nyt, Signed_In != 1)
nyt.loggedIn <- subset(nyt, Signed_In == 1)
# Count of users -- MALE, FEMALE and total Users
nyt.loggedIn.totalUsers<-nrow(subset(nyt.loggedIn))
nyt.loggedIn.maleUsers<-nrow(subset(nyt.loggedIn,nyt.loggedIn$Gender == "MALE"))
nyt.loggedIn.femaleUsers <- nrow(subset(nyt.loggedIn,nyt.loggedIn$Gender == "FEMALE"))  # note:When not logged in records have '0' for age -- be we are taking care of it since we are using the loggedIn dataset
# get the percentage of people loggedIn on a given day -- must have an vector of these nums for 30 days to plot graph
percentLoggedIn <- c(percentLoggedIn,(nyt.loggedIn.totalUsers/length(nyt$Age))*100)
countFemale <- c(countFemale,nrow(subset(nyt.loggedIn,nyt.loggedIn$Gender == "FEMALE")))
countMale <- c(countMale,nrow(subset(nyt.loggedIn,nyt.loggedIn$Gender == "MALE")))
countTotal <- c(countTotal,nrow(nyt))
meanCTR <- c(meanCTR,sum(nyt$Clicks)/sum(nyt$Impressions))
meanClicks <- c(meanClicks,sum(nyt$Clicks)/nrow(subset(nyt,nyt$Clicks>0)))
# SEGEMENT USERS BASED ON THEIR CLICK BEHAVIOUR
# We have found that the distrubution of clicks do not follow
# A guassian distribution -- therefore creating rowLevelCTR
nyt$rowLevelCTR <- nyt$Clicks/nyt$Impressions
# Find the Quartiles --- using rowLeveCTR
quartiles.clicks<-quantile((subset(nyt,nyt$clkCat == "CLICKERS"))$rowLevelCTR,na.rm=TRUE)
# Create categories based on rowLevelCTR quartiles
nyt$clkBehaviour[nyt$rowLevelCTR <= quartiles.clicks[2] & nyt$Clicks > 0 ] <- "low-clicker"
nyt$clkBehaviour[nyt$rowLevelCTR > quartiles.clicks[2] & nyt$rowLevelCTR <= quartiles.clicks[4] & nyt$Clicks > 0] <- "ok-clicker"
nyt$clkBehaviour[nyt$rowLevelCTR > quartiles.clicks[4] & nyt$Clicks > 0] <- "hi-clicker"
nyt$clkBehaviour[nyt$clkCat == "NON_CLICKERS"] <- "non-clicker"
nyt$clkBehaviour[nyt$clkCat == "NOT_TARGETTED"] <- "not-targetted"
####### SUMMARY STATISTICS FOR A DAY STORED IN VECTORS
lowClicker <- c(lowClicker,nrow(subset(nyt,nyt$clkBehaviour == "low-clicker")))
hiClicker <- c(hiClicker,nrow(subset(nyt,nyt$clkBehaviour == "hi-clicker")))
okClicker <- c(okClicker,nrow(subset(nyt,nyt$clkBehaviour == "ok-clicker")))
nonClicker <- c(nonClicker,nrow(subset(nyt,nyt$clkBehaviour == "non-clicker")))
notTargetted <- c(notTargetted,nrow(subset(nyt,nyt$clkBehaviour == "not-targetted")))
remove(nyt)
}
#### :: Prepare dataframe for plots
monthSummary = data.frame(days,percentLoggedIn,countTotal,countFemale,countMale,meanCTR,meanClicks,lowClicker,okClicker,hiClicker,nonClicker,notTargetted)
sapply(monthSummary, class)
#View(monthSummary)
##### :: PLOTS AHEAD
dat <- data.frame(x = rnorm(100))
number_ticks<-function(n){function(limits) pretty (limits,n)}
##### :: Percentage of people logged-in over a 31 days period
ggplot(monthSummary,aes(x=monthSummary$days,y=monthSummary$percentLoggedIn)) +
geom_line(stat="identity")+
scale_x_continuous(breaks=number_ticks(31)) +
labs(x="Days",y="% Logged In",title="Percent Logged In over Time")
dic.ggsave("Percent Logged In over Time.png")
##### :: # Users over time
ggplot(monthSummary,aes(x=monthSummary$days,y=monthSummary$countTotal)) +
geom_line(stat="identity")+
scale_x_continuous(breaks=number_ticks(31)) +
labs(x="Days",y="# Users",title="User count variation over Time")
dic.ggsave("User count variation over Time.png")
##### :: Female and Male users' count over a 31 day period
keepCols <- c("days","countFemale","countMale")
monthSummary.gender<-monthSummary[keepCols]
colnames(monthSummary.gender) <- c("days","Female","Male")
monthSummary.gender.melt <- melt(monthSummary.gender,id.vars=1)
ggplot(monthSummary.gender.melt,aes(x=monthSummary.gender.melt$days,y=monthSummary.gender.melt$value,fill=monthSummary.gender.melt$variable))+
geom_line(stat="identity",aes(color=variable,group=variable)) +
scale_x_continuous(breaks=number_ticks(31)) +
guides(color=guide_legend(title="Gender")) +
labs(x="Days",y="Users",title="User Count variation by Gender over Time")
dic.ggsave("User Count variation by Gender over Time.png")
##### :: Click behaviour distribution over 31 day period -- only pick few cats
keepCols <- c("days","lowClicker","okClicker","hiClicker")
monthSummary.clkBehaviour<-monthSummary[keepCols]
monthSummary.clkBehaviour.melt <- melt(monthSummary.clkBehaviour,id.vars=1)
mx <- monthSummary.clkBehaviour.melt
ggplot(mx,aes(x=mx$days,y=mx$value,fill=variable))+
geom_line(stat="identity",aes(color=variable,group=variable)) +
scale_x_continuous(breaks=number_ticks(31)) +
guides(color=guide_legend(title="Clicker Behaviour")) +
labs(x="Days",y="Users",title="User Count variation by Click Behaviour over Time")
dic.ggsave("User Count variation by Click Behaviour over Time.png")
##### :: CTR over 31 day period
ggplot(monthSummary,aes(x=monthSummary$days, y=monthSummary$meanCTR)) +
geom_line(stat="identity") +
scale_x_continuous(breaks=number_ticks(31)) +
labs(x="Days",y="CTR",title="CTR variation over Time")
dic.ggsave("CTR variation over Time.png")
#### :: Mean CLicks over 31 day period
ggplot(monthSummary,aes(x=monthSummary$days, y=monthSummary$meanClicks)) +
geom_line(stat="identity") +
scale_x_continuous(breaks=number_ticks(31)) +
labs(x="Days",y="Mean Clicks",title="Mean Clicks over Time")
dic.ggsave("Mean Clicks over Time.png")
######################################################################################################################
# END OF FILE
######################################################################################################################
install.packages("reshape")
########################################################################
# File name : census_EDA.R
# Project   : Project 1 -- Census Data, EDA
# Course    : CSE 587 -- Data Intensive Computing
# Author    : Rajaram Rabindranath, Harish Mangalapalli
########################################################################
# install some packages
install.packages("doBy") # group by and other jazz
install.packages("ggplot2") # for plots
install.packages("reshape")
#### :: load required packages
library(plyr)
library(reshape)
library(ggplot2)
library(doBy)
#### :: declaring paths and filename handles
dataSourcePath <- "/home/raja/Education/sem 2/DIC/submission/EDA_using_R_CSE587/Census/Datasets"
#### :: move to the data directory
getwd()
setwd(dataSourcePath)
#### :: load functions
summaryStatistics <- function(x)
{
c(length(x), min(x), max(x), mean(x),median(x))
}
# summary statistics for categorical variables
summaryStatistics.cat <- function(x)
{
c(length(x))
}
summaryStatistics.income <- function(x)
{
c(length(x),mean(x),min(x),max(x),median(x))
}
# function to save ggplots
dic.ggsave <- function(filename = default_name(plot), height= 5, width=12, dpi= 200, ...)
{
ggsave(filename=filename, height=height, width=width, dpi=dpi, ...)
}
keepCols <- function(data, cols){ return(data[,names(data) %in% cols]) }
dropCols <- function(data, cols){ return(data[,!names(data) %in% cols]) }
#### :: Load datasets
load("census.rda")
load("STATEFIP_n_region.rda")
censusData_EDA <-censusData
remove(censusData)
#### what variables do i want -- age / sex / employment status / education / race / state / income
colsOfInterest <- c("yr","age","sex","race","edu_code","nativity","citizen_status","emp_status","stateCode","fam_income","pers_income")
censusData_EDA.withVarOfInterest <- keepCols(censusData_EDA,colsOfInterest)
### DEBUG
nrow(censusData_EDA)
nrow(censusData_EDA.withVarOfInterest)
unique(censusData_EDA.withVarOfInterest$yr)
############### subset data for different years ###########
attach(censusData_EDA.withVarOfInterest)
censusData_01_03 <- subset(censusData_EDA.withVarOfInterest,yr >= 2001 & yr < 2004)
censusData_04_07 <- subset(censusData_EDA.withVarOfInterest,yr >= 2004 & yr < 2008)
censusData_08_10 <- subset(censusData_EDA.withVarOfInterest,yr >= 2008 & yr <=2010)
detach(censusData_EDA.withVarOfInterest)
datasetNames <- c("01_03","04_07","08_10")
############# RUN ALL CODE IN FOR LOOP
for(i in 1:length(datasetNames))
{
name_dataset<-paste("censusData",datasetNames[i],sep="_")
data_by_timeSlice <- get(name_dataset);
attach(data_by_timeSlice)
#### NATIVITY Mappings
data_by_timeSlice$NativityCat[nativity == 0] <- "Unknown"
data_by_timeSlice$NativityCat[nativity == 1 | nativity == 2 | nativity == 3 | nativity == 4] <- "Native Born"
data_by_timeSlice$NativityCat[nativity == 5] <- "Foreign Born"
#### Citizen Mappings
data_by_timeSlice$CitizenCat[citizen_status == 0 | citizen_status == 1] <- "American"
data_by_timeSlice$CitizenCat[citizen_status == 2] <- "Naturalized Citizen"
data_by_timeSlice$CitizenCat[citizen_status == 3] <- "Not a citizen"
data_by_timeSlice$CitizenCat[citizen_status == 9] <- "NIU"
### custom mappings --- education
data_by_timeSlice$EduCat[edu_code == 0] <- "no schooling"
data_by_timeSlice$EduCat[edu_code == 1] <- "NIU"
data_by_timeSlice$EduCat[edu_code == 2] <- "pre school"
data_by_timeSlice$EduCat[edu_code >= 10 & edu_code <= 32] <- "elementary or middle school"
data_by_timeSlice$EduCat[edu_code >= 40 & edu_code <= 70] <- "high school"
data_by_timeSlice$EduCat[edu_code == 73] <- "high school - diploma"
data_by_timeSlice$EduCat[edu_code == 071 | edu_code == 072] <- "high school - no diploma"
data_by_timeSlice$EduCat[edu_code == 81] <- "college no degree"
data_by_timeSlice$EduCat[edu_code == 999] <- "no-information"
data_by_timeSlice$EduCat[edu_code >= 100 & edu_code <= 122] <- "attending college"
data_by_timeSlice$EduCat[edu_code == 80 | edu_code == 90] <- "attending college"
data_by_timeSlice$EduCat[edu_code == 111 | edu_code == 125 |edu_code == 123| edu_code == 124] <- "college Degree"
data_by_timeSlice$EduCat[edu_code == 91 | edu_code == 92] <- "associate's degree"
#debug
nrow(data_by_timeSlice)
a <- subset(data_by_timeSlice,is.na(data_by_timeSlice$EduCat))
head(subset(data_by_timeSlice,is.na(data_by_timeSlice$EduCat)& data_by_timeSlice$edu_code != 1))
unique(a$edu_code)
# custom mappings for employment
data_by_timeSlice$EmpCat[emp_status == 10 | emp_status == 12 | emp_status == 13] <- "employed"
data_by_timeSlice$EmpCat[emp_status == 21 | emp_status == 22] <- "unemployed"
data_by_timeSlice$EmpCat[emp_status >= 30 & emp_status <= 35]<- "Not In Labour Force"
data_by_timeSlice$EmpCat[emp_status == 0] <- "NIU"
#debug
a<-subset(data_by_timeSlice,is.na(data_by_timeSlice$EmpCat))
unique(a$emp_status)
##### custom mappings for RACE
data_by_timeSlice$RaceCat[race == 100]<- "White"
data_by_timeSlice$RaceCat[race == 200]<- "Black"
data_by_timeSlice$RaceCat[race == 300]<- "Red_Indian/Eskimo"
data_by_timeSlice$RaceCat[race == 651 | race == 652]<- "Asian/Pacific"
data_by_timeSlice$RaceCat[race >= 800 & race <=830]<- "Two or more"
data_by_timeSlice$RaceCat[race == 999]<- "NIU"
##### :: Do state mappings
data_by_timeSlice$State <- mapvalues(data_by_timeSlice$stateCode, STATEFIP_n_region$STATEFIP, STATEFIP_n_region$State, warn_missing = FALSE)
data_by_timeSlice$Region <- mapvalues(data_by_timeSlice$stateCode, STATEFIP_n_region$STATEFIP, STATEFIP_n_region$Region, warn_missing = FALSE)
unique(data_by_timeSlice$Region)
unique(data_by_timeSlice$State)
#### :: Do Sex mappings
data_by_timeSlice$Sex[sex == 2] <- "FEMALE"
data_by_timeSlice$Sex[sex == 1] <- "MALE"
data_by_timeSlice$Sex[sex == 9] <- "NIU"
detach(data_by_timeSlice)
#debug
nrow(subset(data_by_timeSlice,is.na(data_by_timeSlice$pers_income)))
nrow(subset(data_by_timeSlice,is.na(data_by_timeSlice$Sex)))
############# KEEP ONLY NECESSARY COLUMNS
cols <- c("stateCode","edu_code","nativity","citizen_status","emp_status","race","sex");
data_by_timeSlice<-dropCols(data_by_timeSlice,cols)
head(data_by_timeSlice)
############## creating factors
head(data_by_timeSlice)
data_by_timeSlice$EduCat <- factor(data_by_timeSlice$EduCat)
data_by_timeSlice$EmpCat <- factor(data_by_timeSlice$EmpCat)
data_by_timeSlice$Sex <- factor(data_by_timeSlice$Sex)
data_by_timeSlice$RaceCat <- factor(data_by_timeSlice$RaceCat)
####################% contribution to family income
data_by_timeSlice$debtor[data_by_timeSlice$pers_income < 0] <- "YES"
data_by_timeSlice$debtor[data_by_timeSlice$pers_income > 0] <- "NO"
data_by_timeSlice$debtor[data_by_timeSlice$pers_income == 0] <- "noContrib"
nrow(subset(data_by_timeSlice,data_by_timeSlice$debtor == "YES"))
nrow(subset(data_by_timeSlice,data_by_timeSlice$pers_income < 0))
#################### race and education
data_by_timeSlice.edu_race_relationship <- summaryBy(age~RaceCat+EduCat,data=subset(data_by_timeSlice,data_by_timeSlice$RaceCat != "NIU"& data_by_timeSlice$EduCat != "NIU"),FUN=summaryStatistics.cat);
#View(data_by_timeSlice.edu_race_relationship)
head(data_by_timeSlice.edu_race_relationship)
cols <- c("Race","Edu_lvl","ObsCount")
colnames(data_by_timeSlice.edu_race_relationship) <-  cols
head(data_by_timeSlice.edu_race_relationship)
attach(data_by_timeSlice.edu_race_relationship)
nameOf_plot <- paste("Education statistics by Race",datasetNames[i],sep="-");
ggplot(data_by_timeSlice.edu_race_relationship,aes(x=Race, y=ObsCount,fill=Edu_lvl)) +
geom_bar(stat="identity",position=position_dodge()) +
labs(x="Race",y="People Count",title=nameOf_plot) +
guides(fill = guide_legend("Education Level")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
nameOf_plot <- paste(nameOf_plot,"png",sep=".")
dic.ggsave(nameOf_plot)
nameOf_plot <- paste("Education statistics by Race(Sans White)",datasetNames[i],sep="-");
ggplot(subset(data_by_timeSlice.edu_race_relationship,data_by_timeSlice.edu_race_relationship$Race != "White"),aes(x=Race, y=ObsCount,fill=Edu_lvl)) +
geom_bar(stat="identity",position=position_dodge()) +
labs(x="Race",y="People Count",title=nameOf_plot)+
guides(fill = guide_legend("Education Level")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
nameOf_plot <- paste(nameOf_plot,"png",sep=".")
dic.ggsave(nameOf_plot)
detach(data_by_timeSlice.edu_race_relationship)
##### do some outlier treatment prior Look Income distribution in each Race category ---
##### :: Doing the outlier cleaning
income <- subset(data_by_timeSlice,data_by_timeSlice$pers_income != 99999999 | data_by_timeSlice$pers_income != 99999998)
nrow(income)
income <- subset(income,income$debtor =="NO")
income <- subset(income,income$EmpCat == "employed")
income <- subset(income,!is.na(income$pers_income))
income <- subset(income,income$RaceCat != "NIU")
#Debug statements
nrow(subset(income,is.na(income$pers_income)))
nrow(subset(income,income$pers_income <0))
nrow(income)
income.incomeStatistics <-summaryBy(income$pers_income~income$RaceCat,data=income,FUN=summaryStatistics.income)
cols <- c("Race","obsCount","IncomeMean","IncomeMin","IncomeMax","IncomeMedian")
colnames(income.incomeStatistics) <- cols
#View(income.incomeStatistics)
nameOf_plot <- paste("Distribution of Income (Box-whisker)",datasetNames[i],sep="-");
qplot(income$RaceCat, income$pers_income, data=income, geom=c("boxplot"),
fill=income$RaceCat, main=nameOf_plot,
xlab="Race", ylab="Income") +
guides(fill = guide_legend("Race")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
nameOf_plot <- paste(nameOf_plot,"png",sep=".")
dic.ggsave(nameOf_plot)
outlier.black <- quantile((subset(income,income$RaceCat == "Black"))$pers_income,probs = c(0.10,0.90),na.rm=TRUE)
# debug statement -- have no effect on dataset
outlier.black
a <-nrow(subset(income,income$RaceCat == "Black"))
b <-nrow(subset(income,income$RaceCat == "Black" & income$pers_income < outlier.black[1]))
c <-nrow(subset(income,income$RaceCat == "Black" & income$pers_income > outlier.black[2]))
a
b
c
(b+c)/a
nrow(income)
income<-income[!(income$RaceCat=="Black" & income$pers_income < outlier.black[1]),]
income<-income[!(income$RaceCat=="Black" & income$pers_income > outlier.black[2]),]
nrow(income)
outlier.Asian_extra <- quantile((subset(income,income$RaceCat == "Asian/Pacific"))$pers_income,probs = c(0.10,0.90),na.rm=TRUE)
# debug statement -- have no effect on dataset
outlier.Asian_extra
a <-nrow(subset(income,income$RaceCat == "Asian/Pacific"))
b <-nrow(subset(income,income$RaceCat == "Asian/Pacific" & income$pers_income < outlier.Asian_extra[1]))
c <-nrow(subset(income,income$RaceCat == "Asian/Pacific" & income$pers_income > outlier.Asian_extra[2]))
a
b
c
(b+c)/a
nrow(income)
income<-income[!(income$RaceCat=="Asian/Pacific" & income$pers_income < outlier.Asian_extra[1]),]
income<-income[!(income$RaceCat=="Asian/Pacific" & income$pers_income > outlier.Asian_extra[2]),]
nrow(income)
nrow(income)
outlier.Two_or_more <- quantile((subset(income,income$RaceCat == "Two or more"))$pers_income,probs = c(0.10,0.90),na.rm=TRUE)
# debug statement -- have no effect on dataset
outlier.Two_or_more
a <-nrow(subset(income,income$RaceCat == "Two or more"))
b <-nrow(subset(income,income$RaceCat == "Two or more" & income$pers_income < outlier.Two_or_more[1]))
c <-nrow(subset(income,income$RaceCat == "Two or more" & income$pers_income > outlier.Two_or_more[2]))
a
b
c
(b+c)/a
nrow(income)
income<-income[!(income$RaceCat=="Two or more" & income$pers_income < outlier.Two_or_more[1]),]
income<-income[!(income$RaceCat=="Two or more" & income$pers_income > outlier.Two_or_more[2]),]
nrow(income)
outlier.AmricanIndian_extra <- quantile((subset(income,income$RaceCat == "Red_Indian/Eskimo"))$pers_income,probs = c(0.10,0.90),na.rm=TRUE)
# debug statement -- have no effect on dataset
outlier.AmricanIndian_extra
a <-nrow(subset(income,income$RaceCat == "Red_Indian/Eskimo"))
b <-nrow(subset(income,income$RaceCat == "Red_Indian/Eskimo" & income$pers_income < outlier.AmricanIndian_extra[1]))
c <-nrow(subset(income,income$RaceCat == "Red_Indian/Eskimo" & income$pers_income > outlier.AmricanIndian_extra[2]))
a
b
c
(b+c)/a
nrow(income)
income<-income[!(income$RaceCat=="Red_Indian/Eskimo" & income$pers_income < outlier.AmricanIndian_extra[1]),]
income<-income[!(income$RaceCat=="Red_Indian/Eskimo" & income$pers_income > outlier.AmricanIndian_extra[2]),]
nrow(income)
nrow(income)
outlier.white <- quantile((subset(income,income$RaceCat == "White"))$pers_income,probs = c(0.10,0.90),na.rm=TRUE)
# debug statement -- have no effect on dataset
outlier.white
a <-nrow(subset(income,income$RaceCat == "White"))
b <-nrow(subset(income,income$RaceCat == "White" & income$pers_income < outlier.white[1]))
c <-nrow(subset(income,income$RaceCat == "White" & income$pers_income > outlier.white[2]))
a
b
c
(b+c)/a
nrow(income)
income<-income[!(income$RaceCat=="White" & income$pers_income < outlier.white[1]),]
income<-income[!(income$RaceCat=="White" & income$pers_income > outlier.white[2]),]
nrow(income)
nameOf_plot <- paste("Distribution of Income (Post outlier treatment)",datasetNames[i],sep="-");
qplot(income$RaceCat, income$pers_income, data=income, geom=c("boxplot"),
fill=income$RaceCat, main=nameOf_plot,
xlab="Race", ylab="Income") +
guides(fill = guide_legend("Race")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
nameOf_plot <- paste(nameOf_plot,"png",sep=".")
dic.ggsave(nameOf_plot)
income.incomeStatistics <-summaryBy(income$pers_income~income$RaceCat+income$Region,data=income,FUN=summaryStatistics.income)
cols <- c("Race","Region","obsCount","IncomeMean","IncomeMin","IncomeMax","IncomeMedian")
colnames(income.incomeStatistics) <- cols
#View(income.incomeStatistics)
nameOf_plot <- paste("Income Mean by Race Across Regions",datasetNames[i],sep="-");
attach(income.incomeStatistics)
ggplot(income.incomeStatistics,aes(x=Race, y=IncomeMean,fill=Race)) +
geom_bar(stat="identity") +
labs(x="Race",y="Mean Income",title=nameOf_plot)+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
facet_wrap(~Region)
nameOf_plot <- paste(nameOf_plot,"png",sep=".")
dic.ggsave(nameOf_plot)
detach(income.incomeStatistics)
############# RACE and employment connection as a percentage of their respective race populations ###############
employment <- subset(data_by_timeSlice, data_by_timeSlice$EmpCat != "NIU")
employment <- subset(employment, employment$RaceCat!= "NIU")
attach(employment)
data_by_timeSlice.emp_race_relationship <- summaryBy(age~RaceCat+EmpCat,data=employment,FUN=summaryStatistics.cat);
head(data_by_timeSlice.emp_race_relationship)
cols <- c("Race","Emp_Status","ObsCount")
colnames(data_by_timeSlice.emp_race_relationship) <- cols
detach(employment)
#View(data_by_timeSlice.emp_race_relationship)
attach(data_by_timeSlice.emp_race_relationship)
sum.black <- sum((data_by_timeSlice.emp_race_relationship[Race == "Black",])$ObsCount)
sum.white <- sum((data_by_timeSlice.emp_race_relationship[Race == "White",])$ObsCount)
sum.AmerIndian_extra <- sum((data_by_timeSlice.emp_race_relationship[Race == "Red_Indian/Eskimo",])$ObsCount)
sum.Asian_extra <- sum((data_by_timeSlice.emp_race_relationship[Race == "Asian/Pacific",])$ObsCount)
sum.Tow_or_more <- sum((data_by_timeSlice.emp_race_relationship[Race == "Two or more",])$ObsCount)
data_by_timeSlice.emp_race_relationship$TotalByRace[Race == "Red_Indian/Eskimo"] <- sum.AmerIndian_extra
data_by_timeSlice.emp_race_relationship$TotalByRace[Race == "Asian/Pacific"] <- sum.Asian_extra
data_by_timeSlice.emp_race_relationship$TotalByRace[Race == "Two or more"] <- sum.Tow_or_more
data_by_timeSlice.emp_race_relationship$TotalByRace[Race == "Black"] <- sum.black
data_by_timeSlice.emp_race_relationship$TotalByRace[Race == "White"] <- sum.white
data_by_timeSlice.emp_race_relationship$percentageOfPop <- (data_by_timeSlice.emp_race_relationship$ObsCount/ data_by_timeSlice.emp_race_relationship$TotalByRace)*100
nameOf_plot <- paste("Employment statistics by Race",datasetNames[i],sep="-");
ggplot(data_by_timeSlice.emp_race_relationship,aes(x=Race, y=percentageOfPop,fill=Emp_Status)) +
geom_bar(stat="identity",position=position_dodge()) +
labs(x="Race",y="% of Population",title=nameOf_plot) +
guides(fill = guide_legend("Employment Status")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
nameOf_plot <- paste(nameOf_plot,"png",sep=".")
dic.ggsave(nameOf_plot)
detach(data_by_timeSlice.emp_race_relationship)
attach(employment)
data_by_timeSlice.emp_race_relationship_by_region <- summaryBy(age~RaceCat+EmpCat+Region,data=employment,FUN=summaryStatistics.cat);
head(data_by_timeSlice.emp_race_relationship_by_region)
cols <- c("Race","Emp_Status","Region","ObsCount")
colnames(data_by_timeSlice.emp_race_relationship_by_region) <- cols
#View(data_by_timeSlice.emp_race_relationship_by_region)
detach(employment)
attach(data_by_timeSlice.emp_race_relationship_by_region)
sum.black <- sum((data_by_timeSlice.emp_race_relationship_by_region[Race == "Black",])$ObsCount)
sum.white <- sum((data_by_timeSlice.emp_race_relationship_by_region[Race == "White",])$ObsCount)
sum.AmerIndian_extra <- sum((data_by_timeSlice.emp_race_relationship_by_region[Race == "Red_Indian/Eskimo",])$ObsCount)
sum.Asian_extra <- sum((data_by_timeSlice.emp_race_relationship_by_region[Race == "Asian/Pacific",])$ObsCount)
sum.Tow_or_more <- sum((data_by_timeSlice.emp_race_relationship_by_region[Race == "Two or more",])$ObsCount)
data_by_timeSlice.emp_race_relationship_by_region$TotalByRace[Race == "Red_Indian/Eskimo"] <- sum.AmerIndian_extra
data_by_timeSlice.emp_race_relationship_by_region$TotalByRace[Race == "Asian/Pacific"] <- sum.Asian_extra
data_by_timeSlice.emp_race_relationship_by_region$TotalByRace[Race == "Two or more"] <- sum.Tow_or_more
data_by_timeSlice.emp_race_relationship_by_region$TotalByRace[Race == "Black"] <- sum.black
data_by_timeSlice.emp_race_relationship_by_region$TotalByRace[Race == "White"] <- sum.white
detach(data_by_timeSlice.emp_race_relationship_by_region)
#View(data_by_timeSlice.emp_race_relationship_by_region)
data_by_timeSlice.emp_race_relationship_by_region$percentageOfPop <- (data_by_timeSlice.emp_race_relationship_by_region$ObsCount/ data_by_timeSlice.emp_race_relationship_by_region$TotalByRace)*100
nameOf_plot <- paste("Employment statistics by Race Distribution across Regions",datasetNames[i],sep="-");
attach(data_by_timeSlice.emp_race_relationship_by_region)
ggplot(data_by_timeSlice.emp_race_relationship_by_region,aes(x=Race, y=percentageOfPop,fill=Emp_Status)) +
geom_bar(stat="identity",position=position_dodge()) +
labs(x="Race",y="% population",title=nameOf_plot)  +
guides(fill = guide_legend("Employment Status")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
facet_wrap(~Region)
nameOf_plot <- paste(nameOf_plot,"png",sep=".")
dic.ggsave(nameOf_plot)
detach(data_by_timeSlice.emp_race_relationship_by_region)
## remove datasets
remove(income)
remove(employment)
remove(income.incomeStatistics)
remove(data_by_timeSlice)
remove(data_by_timeSlice.edu_race_relationship)
remove(data_by_timeSlice.emp_race_relationship)
remove(data_by_timeSlice.emp_race_relationship_by_region)
}
#### remove datasets
remove(censusData_01_03)
remove(censusData_04_07)
remove(censusData_08_10)
remove(censusData_EDA)
######################################################################################################################
# END OF FILE
######################################################################################################################
install.packages("doBy")
install.packages("ggplot2")
install.packages("reshape")
install.packages("ggplot2")
install.packages("reshape")
install.packages("reshape")
